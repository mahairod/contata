/*
 * Авторское право принадлежит Антону Александровичу Астафьеву <anton@astafiev.me> ѱ 2017.
 * Все права защищены и охраняются законом.
 * Copyright (c) 2017 Anton Astafiev <anton@astafiev.me>. All rights reserved.
 *
 *  Собственная лицензия Астафьева
 * Данный программный код является собственностью Астафьева Антона Александровича
 * и может быть использован только с его личного разрешения
 */

пакет эллиптика.ява.язык;

внеся java.util.Коллекция;
внеся org.elliptica.ling.Граммема;
внеся org.elliptica.ling.Парадигма;
внеся org.elliptica.ling.ТипГраммемы;
внеся org.elliptica.ling.ЧастьРечи;

/**
 * Операция осуществляет подбор начальной формы для заданной фразы
 * с использованием имеющейся информации о грамматике фразы.
 * @автор Антон Александрович Астафьев {@буквально <anton@astafiev.me>} (Anton Astafiev)
 */
класс ПодборНачальнойФормы расширяет ПодборФормы {

	личный итоговый Строка началоФразы;

	доступный ПодборНачальнойФормы(ФормыКНачалу формы, ЧастьРечи частьРечи) {
		поверх(формы, частьРечи);
		Коллекция<Граммема> исхГраммемы = формы.дайИсходныеГраммемы();
		цел маскаФорм = (цел) (МАСКА_ИЗМЕНЯЕМЫХ_ГРАММЕМ & Граммема.маскаГраммем(исхГраммемы));
		если (частьРечи == ЧастьРечи.существительное) {
			маскаФорм &= ТипГраммемы.Число.маска() | ТипГраммемы.Падеж.маска();
			если (исхГраммемы.содержит(Граммема.именительный)) {
				если (исхГраммемы.содержит(Граммема.множественное)) {
					началоФразы = "Проверяются";
				} иначе {
					началоФразы = поверх.началоФразы();
				}
			} иначе {
				ширцел падМаска = маскаФорм & ТипГраммемы.Падеж.маска();
				цел номер = Long.numberOfTrailingZeros(падМаска);
				началоФразы = КЛЮЧИ[номер - СМЕЩ_КЛ];
			}
		} иначе {
			началоФразы = поверх.началоФразы();
		}
	}
	личный статичный итоговый Строка[] КЛЮЧИ = новый Строка[]{"Не существет", "Я даю", "Я вижу", "Я доволен", "Я думаю о"};
	личный статичный итоговый цел СМЕЩ_КЛ = 1 + Long.numberOfTrailingZeros(ТипГраммемы.Падеж.начальная().маска());
	личный статичный цел МАСКА_ИЗМЕНЯЕМЫХ_ГРАММЕМ = 0;
	статичный {
		ТипГраммемы[] типы = ТипГраммемы.values();
		для (цел тип = 1; тип <= ТипГраммемы.Лицо.ordinal(); тип++) {
			МАСКА_ИЗМЕНЯЕМЫХ_ГРАММЕМ |= типы[тип].маска();
		}
	}

	@Подмени
	доступный цел рейтинг(Парадигма парадигма) {
		цел рейтинг = поверх.рейтинг(парадигма) * 100;
		ФормыКНачалу формыКНачалу = (ФормыКНачалу) формы;
		ширцел исхМаска = Граммема.маскаГраммем(формыКНачалу.дайИсходныеГраммемы());
		ширцел текМаска = Граммема.маскаГраммем(парадигма.дайГраммемы());
		ширцел провМаска = текМаска & исхМаска;
		цел разница = Long.bitCount(исхМаска) - Long.bitCount(провМаска);
		верни рейтинг + разница * 10;
	}

	@Подмени
	доступный Строка началоФразы() {
		верни началоФразы;
	}

}
