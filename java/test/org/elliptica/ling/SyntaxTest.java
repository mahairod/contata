/*
 *  Лицензия Астафьева
 * Данный программный код является собственностью Астафьева Антона Александровича
 * и может быть использован только с его личного разрешения
 */
пакет org.elliptica.ling;

внеся java.util.logging.Logger;
внеся java.util.stream.Collectors;
внеся java.util.Список;
внеся org.elliptica.ling.syntax.*;
внеся org.elliptica.ling.syntax.Омоним;
внеся org.junit.After;
внеся org.junit.AfterClass;
внеся org.junit.Before;
внеся org.junit.BeforeClass;
внеся org.junit.Test;
внеся статичный org.junit.Assert.*;
внеся эллиптика.ява.синтаксис.структ.ГруппаСтруктуры;
внеся эллиптика.ява.синтаксис.структ.ФабрикаСтруктуры;
внеся эллиптика.ява.язык.Система;

/**
 *
 * @author Антон Александрович Астафьев {@literal <anton@astafiev.me>} (Anton Astafiev)
 */
доступный класс SyntaxTest {
	
	доступный SyntaxTest() {
	}
	
	@BeforeClass
	доступный статичный тщетный setUpClass() {
		instance = новый Syntax(
				"/mnt/f16/mahairod/Develop/cpp/linguistan",
				"/mnt/f16/mahairod/Develop/cpp/linguistan/Source/JSyntaxAn/dist/Debug/GNU-Linux-x86/libJSyntaxAn.so"
		);
	}
	
	@AfterClass
	доступный статичный тщетный tearDownClass() {
	}
	
	@Before
	доступный тщетный setUp() {
	}
	
	@After
	доступный тщетный tearDown() {
	}

	/**
	 * Test of разборТекста method, of класс Syntax.
	 */
	@Test
	доступный тщетный testРазборТекста() {
		Система.вывод.печатьстр("РазборТекста");
		Строка текст = "В ходе поисков были обследованы более 70 тысяч квадратных километров, но никаких следов или обломков найти не удалось. С приходом зимы операцию пришлось прервать. Летом поиски возобновились. Работы осложнялись горным рельефом местности.";
		Список<Строка> результат = новый Синтаксис(instance).разборТекстаТест(текст);
		assertNotNull(результат);
		assertFalse(результат.isEmpty());
	}

//	Строка разделитель = "(?=[а-яё]).{0}(?=[А-ЯЁ])";
	Строка разделитель = "(?=[А-ЯЁ][а-яё]+)";

	@Test
	доступный тщетный проверкаРазбораФразы() {
		Система.вывод.печатьстр("РазборФразы");
		Строка вход = "главнаяЧастьМетроРусского";
		Строка[] слова = вход.split(разделитель);
		Строка фраза = "Проверяется";
		для (Строка слово : слова) {
			фраза += " " + слово.toLowerCase();
		}
		// пока работает только для одного фрагмента
		СинтаксическоеДерево результат = новый Синтаксис(instance).разборТекста(фраза);
		ЛОГ.warning("Фраза: " + фраза);
		assertTrue(слова.length > 1);
		assertNotNull(результат);
		assertFalse(результат.getПредложения().пусто());
		
		Предложение предложение = результат.getПредложения().дай(0);
		Слово слово = предложение.дайСписокСлов().дай(1);
		assertNotNull(слово);
		Омоним омоним = слово.дайОмонимы().дай(0);
		assertNotNull(омоним);
		Вариант вариант = омоним.дайЮнит().родитель();
		Список<Группа> группы = вариант.дайГруппы();
		assertNotNull(группы);
		assertFalse(группы.пусто());

		Integer[] основа = новый Integer[2];
		группы.поток().filter(группа -> группа.дайТип() == Группа.Тип.ОСНОВА).findAny().ifPresent(
			группа -> {
				основа[0] = группа.дайНачало();
				основа[1] = группа.дайКонец();
			}
		);
		assertNotNull(основа[0]);

		Список<Группа> итоговыеГруппы = группы.поток()
				.filter(гр -> гр.дайНачало() != основа[1] && гр.дайКонец() != основа[1] )
				.collect(Collectors.toList());
		Список<Омоним> омонимы = вариант.дайЮниты().поток()
				.map(юнит -> юнит.дайОмоним())
				.collect(Collectors.toList());
		
		assertFalse(итоговыеГруппы.пусто());
		assertFalse(омонимы.пусто());

		ГруппаСтруктуры гСтр = ФабрикаСтруктуры.создайСтруктуру(итоговыеГруппы, омонимы);

		assertNotNull(гСтр);
		assertNull(гСтр.дайТару());
		assertNotNull(гСтр.дайЧастьРечи());
		assertNotNull(гСтр.дайГраммемы());
		assertNotNull(гСтр.дайГлавноеСлово());
		assertTrue(гСтр.дайПервоеСлово().дайЗначение(), гСтр.дайПервоеСлово().дайЗначение().equals( омонимы.дай(1).дайЗначение()) );
		цел посл = омонимы.размер()-1;
		assertTrue(
				гСтр.дайПоследнееСлово().дайЗначение() + " != " + омонимы.дай(посл).дайЗначение(),
				гСтр.дайПоследнееСлово().дайЗначение().equals( омонимы.дай(посл).дайЗначение())
		);
		assertTrue(гСтр.дайПоследнееСлово() == омонимы.дай(омонимы.размер()-1));


		Список<Строка> предст = гСтр.представление();
		
		Строка вывод = предст.поток().reduce("Вывод", (стр1, стр2) -> {
			верни стр1 + "\n" + стр2;
		});

		assertTrue(вывод, ложь);
		assertTrue("Разм: " + предст.размер(), предст.размер() > 1);
		assertTrue("Разм: " + предст.размер(), предст.размер() > 2);
		assertTrue("Разм: " + предст.размер(), предст.размер() > 3);
		assertTrue("Разм: " + предст.размер(), предст.размер() > 4);
		assertTrue("Разм: " + предст.размер(), предст.размер() > 5);

	}

	/**
	 * Test of finalize method, of класс Syntax.
	 * @кидает java.lang.Throwable
	 */
//	@Test
	доступный тщетный testFinalize() кидает Throwable {
		Система.вывод.печатьстр("finalize");
		instance.finalize();
	}
	
	личный статичный Syntax instance = ничто;
	статичный итоговый Logger ЛОГ = Logger.getLogger(SyntaxTest.класс.getName());
}
