/*
 * Авторское право принадлежит Антону Александровичу Астафьеву <anton@astafiev.me> (Anton Astafiev) ѱ.
 * Все права защищены и охраняются законом.
 * Copyright (c) 2016 Антон Александрович Астафьев <anton@astafiev.me> (Anton Astafiev). All rights reserved.
 * 
 *  Собственная лицензия Астафьева
 * Данный программный код является собственностью Астафьева Антона Александровича
 * и может быть использован только с его личного разрешения
 */

пакет эллиптика.ява.ввыв;

внеся java.io.File;
внеся java.io.FileFilter;
внеся java.io.FilenameFilter;
внеся java.io.IOException;
внеся java.net.MalformedURLException;
внеся java.net.URI;
внеся java.net.URL;
внеся java.nio.file.Path;

/**
 *
 * @author Антон Александрович Астафьев <anton@astafiev.me>
 */
доступный класс Файл расширяет File {

	доступный Файл(Строка родитель, Строка потомок) {
		поверх(родитель, потомок);
	}

	доступный Файл(Строка имяпути) {
		поверх(имяпути);
	}

	доступный Файл(Файл родитель, Строка потомок) {
		поверх(родитель, потомок);
	}

	личный Файл(File родитель) {
		поверх(родитель, "");
	}

	доступный Path кПути() {
		верни toPath();
	}

	доступный цел compareTo(Файл имяпути) {
		верни compareTo(имяпути);
	}

	доступный ширцел дайЗанятоеМесто() {
		верни getUsableSpace();
	}

	доступный ширцел дайСвободноеМесто() {
		верни getFreeSpace();
	}

	доступный ширцел дайСуммарноеМесто() {
		верни getTotalSpace();
	}

	доступный логическое можноИсполнить() {
		верни canExecute();
	}

	доступный логическое установиИсполнимым(логическое исполнимый) {
		верни setExecutable(исполнимый);
	}

	доступный логическое установиИсполнимым(логическое исполнимый, логическое толькоВладельцу) {
		верни setExecutable(исполнимый, толькоВладельцу);
	}

	доступный логическое установиСчитываемым(логическое считываемый) {
		верни setReadable(считываемый);
	}

	доступный логическое установиСчитываемым(логическое считываемый, логическое толькоВладельцу) {
		верни setReadable(считываемый, толькоВладельцу);
	}

	доступный логическое установиЗаписываемым(логическое записываемый) {
		верни setWritable(записываемый);
	}

	доступный логическое установиЗаписываемым(логическое записываемый, логическое толькоВладельцу) {
		верни setWritable(записываемый, толькоВладельцу);
	}

	доступный логическое установиТолькоСчитываемым() {
		верни setReadOnly();
	}

	доступный логическое задайПослИзменение(ширцел время) {
		верни setLastModified(время);
	}

	доступный логическое переименуй(Файл назнач) {
		верни renameTo(назнач);
	}

	доступный логическое сздЦепьКат() {
		верни mkdirs();
	}

	доступный логическое сздКат() {
		верни mkdir();
	}

	доступный Файл[] списокФайлов(FileFilter фильтр) {
		верни файлами(listFiles(фильтр));
	}

	доступный Файл[] списокФайлов(FilenameFilter фильтр) {
		верни файлами(listFiles(фильтр));
	}

	доступный Файл[] списокФайлов() {
		верни файлами(listFiles());
	}

	доступный Строка[] список(FilenameFilter фильтр) {
		верни list(фильтр);
	}

	доступный Строка[] список() {
		верни list();
	}

	доступный тщетный удалиПоЗакрытии() {
		deleteOnExit();
	}

	доступный логическое удали() {
		верни delete();
	}

	доступный логическое создайНовыйФайл() кидает IOException {
		верни createNewFile();
	}

	доступный ширцел длина() {
		верни length();
	}

	доступный ширцел послИзменение() {
		верни lastModified();
	}

	доступный логическое есмьСкрытый() {
		верни isHidden();
	}

	доступный логическое есмьФайл() {
		верни isFile();
	}

	доступный логическое есмьКаталог() {
		верни isDirectory();
	}

	доступный логическое существует() {
		верни exists();
	}

	доступный логическое можноЗаписать() {
		верни canWrite();
	}

	доступный логическое можноСчитать() {
		верни canRead();
	}

	// Универсальный Определитель Запасов
	доступный URI кУОпЗ() {
		верни toURI();
	}

	// Универсальный Обнаружитель Запасов
	доступный URL кУОбЗ() кидает MalformedURLException {
		верни toURL();
	}

	доступный Файл дайВыправленныйФайл() кидает IOException {
		верни файлом(getCanonicalFile());
	}

	доступный Строка дайВыправленныйПуть() кидает IOException {
		верни getCanonicalPath();
	}

	доступный Файл дайОтделённыйФайл() {
		верни файлом(getAbsoluteFile());
	}

	доступный Строка дайОтделённыйПуть() {
		верни getAbsolutePath();
	}

	доступный логическое есмьОтделённый() {
		верни isAbsolute();
	}

	доступный Строка дайПуть() {
		верни getPath();
	}

	доступный Файл дайРодительскийФайл() {
		верни файлом(getParentFile());
	}

	доступный Строка дайРодителя() {
		верни getParent();
	}

	доступный Строка дайИмя() {
		верни getName();
	}

	личный Файл файлом(File file){
		верни новый Файл(file);
	}

	личный Файл[] файлами(File[] files){
		Файл[] результат = новый Файл[files.length];
		для (цел ном = 0; ном < результат.length; ном++) {
			результат[ном] = файлом(files[ном]);
		}
		верни результат;
	}

}
