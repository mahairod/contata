/*
 *  Лицензия Астафьева
 * Данный программный код является собственностью Астафьева Антона Александровича
 * и может быть использован только с его личного разрешения
 */
package org.elliptica.ling;

import static org.elliptica.ling.ТипГраммемы.*;

/**
 *
 * @author Антон Астафьев <anton@astafiev.me> (Anton Astafiev)
 */
public enum Граммема {
		множественное(Число), единственное(Число), //1
		именительный(Падеж), родительный(Падеж), дательный(Падеж), винительный(Падеж), творительный(Падеж), предложный(Падеж), звательный(Падеж), //8
		мужской(Род), женский(Род), средний(Род), обоюдный(Род), //12
		настоящее(Время), будущее(Время), прошлое(Время),
		первое(Лицо), второе(Лицо), третье(Лицо),//18
		повелительное(Наклонение),//19
		одушевлённое(Одушевлённость), неодушевлённое(Одушевлённость),
		сравнительная(Степень_сравнения),//22
		совершенный(Вид), несовершенный(Вид),
		непереходный(Переходность), переходный(Переходность),
		действительный(Залог), страдательный(Залог),//28
		неизменяемое(НетТипа), аббревиатура(Собственное), отчество(Собственное),//31
		локативность(Собственное), организация(Собственное),
		качественное(Разряд),
		нетМножЧисла(НетТипа),//35
		вопросительное(НетТипа), указательное(НетТипа), // для наречий
		имя(Собственное), фамилия(Собственное),//39
		безличный(НетТипа),
		жаргонизм(Стиль), опечатка(Стиль),//42
		разговорное(Стиль), притяжательное(Специальный_падеж), архаизм(Стиль),//45
		нестандПадеж(Специальный_падеж), // для второго родительного и второго предложного
		поэтизм(Стиль), профессионализм(Стиль),//48
		превосходная(Степень_сравнения), poloj(НетТипа)//50
		;

	Граммема(ТипГраммемы типГраммемы) {
		this.типГраммемы = типГраммемы;
		типГраммемы.updateLimits(this);
	}
	private final ТипГраммемы типГраммемы;

	public String коротко() {
		if (ordinal() <= третье.ordinal()) {
			int смещение = ordinal() - база().ordinal();
			return Названия.краткие_имена[типГраммемы.ordinal()][смещение];
		} else {
			return toString();
		}
	}

	public Граммема база() {
		return тип().границы()[0];
	}

	public ТипГраммемы тип() {
		return типГраммемы;
	}

	public boolean тип(ТипГраммемы проверка) {
		return this.тип() == проверка;
	}

	private String описание(int смещение) {
		StringBuilder sb = new StringBuilder(64);
		String название = Названия.полные_имена[тип().ordinal()][смещение];
		sb.append(название).append(' ').append(типГраммемы.имя());
		return sb.toString();
	}

	@Override
	public String toString() {
		switch (this) {
			case повелительное:
				return описание(2);
			case сравнительная:
				return описание(1);
			case превосходная:
				return описание(2);
			default:
				if (ordinal() <= страдательный.ordinal()) {
					int смещение = ordinal() - база().ordinal();
					return описание(смещение);
				} else {
					return this.name();
				}
		}
	}

}
