/*
 * Авторское право принадлежит Антону Александровичу Астафьеву <anton@astafiev.me> ѱ 2017.
 * Все права защищены и охраняются законом.
 * Copyright (c) 2017 Anton Astafiev <anton@astafiev.me>. All rights reserved.
 *
 *  Собственная лицензия Астафьева
 * Данный программный код является собственностью Астафьева Антона Александровича
 * и может быть использован только с его личного разрешения
 */

пакет эллиптика.ява.морфемика;

внеся java.util.Коллекция;
внеся java.util.Множество;
внеся java.util.Список;
внеся org.elliptica.ling.Граммема;
внеся эллиптика.ява.Объект;
внеся эллиптика.ява.морфемика.логика.ОшибкаНеверныйАргумент;
внеся эллиптика.ява.морфемика.логика.ОшибкаНесовместимаяМорфема;
внеся эллиптика.ява.морфемика.логика.ОшибкаСловообразования;
внеся эллиптика.ява.морфемика.смыслы.СмысловойТип;


/**
 *
 * @автор Антон Александрович Астафьев {@буквально <anton@astafiev.me>} (Anton Astafiev)
 */
доступный абстрактный класс ТиповаяМорфема расширяет Объект воплощает Морфема {

	защищённый статичный итоговый Граммема[] Г = {};
	защищённый ширцел граммемы;
	защищённый Строка значение;

	@Подмени
	доступный Граммема[] граммемы() {
		верни Граммема.дайГраммемы(граммемы).кМассиву(АбстрактнаяМорфема.Г);
	}

	@Подмени
	доступный Строка значение() {
		верни значение;
	}

	защищённый Строка конец(цел дл) {
		Строка з = значение();
		верни дл >= з.длина() ? з.подстрока(з.длина() - дл) : "";
	}

	@Подмени
	доступный итоговый Список<Морфема> примениК(Список<Морфема> слово) кидает ОшибкаСловообразования {
		если (слово == ничто || слово.пусто()) {
			кинь новый ОшибкаНеверныйАргумент();
		}
		итоговый Морфема морфема = слово.дай(слово.размер() - 1);
		если (!применимК(морфема)) {
			кинь новый ОшибкаНесовместимаяМорфема(это, морфема);
		}
		примениНа(слово);
		верни слово;
	}

	защищённый тщетный примениНа(Список<Морфема> слово) кидает ОшибкаНесовместимаяМорфема {
		слово.добавь(это);
	}

	@Подмени
	доступный логическое применимК(Морфема то) {
		верни это.базоваяЧастьРечи() == то.целеваяЧастьРечи() && это.ставитсяВозле().содержит(то.дайТип());
	}

	@Подмени
	доступный абстрактный СмысловойТип смысловаяФорма();

	защищённый Множество<ТипМорфемы> ставитсяВозле() {
		верни дайТип() == ТипМорфемы.ПРИСТАВКА ? ставитсяПеред() : ставитсяПосле();
	}

	защищённый абстрактный Множество<ТипМорфемы> ставитсяПеред();

	защищённый абстрактный Множество<ТипМорфемы> ставитсяПосле();

	@Подмени
	доступный Строка строкой() {
		Строка код = значение;
		если (дайТип().ordinal() < ТипМорфемы.ДИСФИКС.ordinal()) {
			код = код + "-";
		}
		если (дайТип().ordinal() > ТипМорфемы.КОРЕНЬ.ordinal()) {
			код = "-" + код;
		}
		верни код + "(" + дайТип().name().вНижнемРегистре() + "," + базоваяЧастьРечи().кратко() + "->" + целеваяЧастьРечи().кратко() + ")";
	}

	@Подмени
	доступный абстрактный ТипМорфемы дайТип();

	защищённый тщетный установиГраммемы(Коллекция<Граммема> граммемы) {
		это.граммемы |= Граммема.маскаГраммем(граммемы);
	}
	защищённый тщетный сбросьГраммемы(Коллекция<Граммема> граммемы) {
		это.граммемы &= ~Граммема.маскаГраммем(граммемы);
	}
}
