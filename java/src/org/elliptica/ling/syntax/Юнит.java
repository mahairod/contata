/*
 * Авторское право принадлежит Антону Александровичу Астафьеву <anton@astafiev.me> (Anton Astafiev) ѱ.
 * Все права защищены и охраняются законом.
 * Copyright (c) 2015 Антон Александрович Астафьев <anton@astafiev.me> (Anton Astafiev). All rights reserved.
 * 
 *  Собственная лицензия Астафьева
 * Данный программный код является собственностью Астафьева Антона Александровича
 * и может быть использован только с его личного разрешения
 */

пакет org.elliptica.ling.syntax;

внеся java.util.HashMap;
внеся java.util.ПорядковыйСписок;
внеся java.util.Словарь;
внеся java.util.Список;
внеся javax.xml.bind.annotation.XmlElement;
внеся javax.xml.bind.annotation.XmlRootElement;
внеся org.elliptica.ling.Граммема;
внеся org.elliptica.ling.ЧастьРечи;

/**
 *
 * @author Антон Александрович Астафьев {@literal <anton@astafiev.me>} (Anton Astafiev)
 */
@XmlRootElement
доступный класс Юнит расширяет ПодОбъектСинт<Вариант> {

	@XmlElement
	доступный Строка getЧастьРечи() {
		верни частьРечи;
	}

	доступный тщетный setЧастьРечи(Строка частьРечи) {
		это.частьРечи = частьРечи;
	}

	@XmlElement
	доступный цел getНомер() {
		верни номер;
	}

	доступный тщетный setНомер(цел номер) {
		это.номер = номер;
	}

	@XmlElement
	доступный ширцел getГраммемы() {
		верни граммемы;
	}

	доступный тщетный setГраммемы(ширцел граммемы) {
		это.граммемы = граммемы;
	}

	доступный Омоним getОмоним() {
		верни дайОмоним();
	}

	доступный Омоним дайОмоним() {
		верни омоним;
	}

	доступный ЧастьРечи дайЧастьРечи() {
		верни сокращенияЧастейРечи.дай(частьРечи);
	}

	доступный Список<Граммема> дайГраммемы() {
		Список<Граммема> список = новый ПорядковыйСписок<>(Long.bitCount(граммемы));
		Граммема[] гг = Граммема.values();
		ширцел грамм = граммемы;
		пока (грамм != 0){
			цел инд = Long.numberOfTrailingZeros(грамм);
			список.добавь(гг[инд]);
			грамм &= ~ Long.lowestOneBit(грамм);
		}
		верни список;
	}

	личный цел номер;
	личный Строка частьРечи;
	личный ширцел граммемы;
	Омоним омоним;

	личный итоговый статичный Словарь<Строка,ЧастьРечи> сокращенияЧастейРечи = новый HashMap<>();
	статичный {
		цел указ = 0;
		Строка[] сокращения = новый Строка[]{
			"С",			"П",	"Г",		"МС",		"МС-П",
			"МС-ПРЕДК",		"ЧИСЛ",	"ЧИСЛ-П",	"Н",		"ПРЕДК",
			"ПРЕДЛ",		"ПОСЛ",	"СОЮЗ",		"МЕЖД",		"ВВОДН",
			"ФРАЗ",			"ЧАСТ",	"КР_ПРИЛ",	"ПРИЧАСТИЕ","ДЕЕПРИЧАСТИЕ",
			"КР_ПРИЧАСТИЕ",	"ИНФИНИТИВ","ЛЮБОЙ",	"ТОТЖЕ",	"ОТГЛАГОЛЬНЫЙ",
			"СУПИН",		"КОРЕНЬ"
		};
		
		для (ЧастьРечи частьРечи : ЧастьРечи.values()) {
			сокращенияЧастейРечи.клади(сокращения[указ++], частьРечи);
		}
		
	}
}
