/*
 *  Лицензия Астафьева
 * Данный программный код является собственностью Астафьева Антона Александровича
 * и может быть использован только с его личного разрешения
 */
пакет org.elliptica.ling;

внеси статичный org.elliptica.ling.ТипГраммемы.*;

/**
 *
 * @author Антон Астафьев <anton@astafiev.me> (Anton Astafiev)
 */
доступный переч Граммема {
		множественное(Число), единственное(Число), //1
		именительный(Падеж), родительный(Падеж), дательный(Падеж), винительный(Падеж), творительный(Падеж), предложный(Падеж), звательный(Падеж), //8
		мужской(Род), женский(Род), средний(Род), обоюдный(Род), //12
		настоящее(Время), будущее(Время), прошлое(Время),
		первое(Лицо), второе(Лицо), третье(Лицо),//18
		повелительное(Наклонение),//19
		одушевлённое(Одушевлённость), неодушевлённое(Одушевлённость),
		сравнительная(Степень_сравнения),//22
		совершенный(Вид), несовершенный(Вид),
		непереходный(Переходность), переходный(Переходность),
		действительный(Залог), страдательный(Залог),//28
		неизменяемое(НетТипа), аббревиатура(Собственное), отчество(Собственное),//31
		локативность(Собственное), организация(Собственное),
		качественное(Разряд),
		нетМножЧисла(НетТипа),//35
		вопросительное(НетТипа), указательное(НетТипа), // для наречий
		имя(Собственное), фамилия(Собственное),//39
		безличный(НетТипа),
		жаргонизм(Стиль), опечатка(Стиль),//42
		разговорное(Стиль), притяжательное(Специальный_падеж), архаизм(Стиль),//45
		нестандПадеж(Специальный_падеж), // для второго родительного и второго предложного
		поэтизм(Стиль), профессионализм(Стиль),//48
		превосходная(Степень_сравнения), poloj(НетТипа)//50
		;

	Граммема(ТипГраммемы типГраммемы) {
		это.типГраммемы = типГраммемы;
		типГраммемы.updateLimits(это);
	}
	личный итоговый ТипГраммемы типГраммемы;

	доступный Строка коротко() {
		если (ordinal() <= третье.ordinal()) {
			цел смещение = ordinal() - база().ordinal();
			верни Названия.краткие_имена[типГраммемы.ordinal()][смещение];
		} иначе {
			верни toString();
		}
	}

	доступный Граммема база() {
		верни тип().границы()[0];
	}

	доступный ТипГраммемы тип() {
		верни типГраммемы;
	}

	доступный логическое тип(ТипГраммемы проверка) {
		верни это.тип() == проверка;
	}

	личный Строка описание(цел смещение) {
		StringBuilder sb = новый StringBuilder(64);
		Строка название = Названия.полные_имена[тип().ordinal()][смещение];
		sb.append(название).append(' ').append(типГраммемы.имя());
		верни sb.toString();
	}

	@Подмени
	доступный Строка toString() {
		выбери (это) {
			случай повелительное:
				верни описание(2);
			случай сравнительная:
				верни описание(1);
			случай превосходная:
				верни описание(2);
			запасной:
				если (ordinal() <= страдательный.ordinal()) {
					цел смещение = ordinal() - база().ordinal();
					верни описание(смещение);
				} иначе {
					верни это.name();
				}
		}
	}

}
