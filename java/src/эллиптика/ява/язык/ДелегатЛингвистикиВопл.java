/*
 * Авторское право принадлежит Антону Александровичу Астафьеву <anton@astafiev.me> (Anton Astafiev) ѱ.
 * Все права защищены и охраняются законом.
 * Copyright (c) 2016-2017 Антон Александрович Астафьев <anton@astafiev.me> (Anton Astafiev). All rights reserved.
 *
 *  Собственная лицензия Астафьева
 * Данный программный код является собственностью Астафьева Антона Александровича
 * и может быть использован только с его личного разрешения
 */

пакет эллиптика.ява.язык;

внеся java.util.EnumSet;
внеся java.util.TreeMap;
внеся java.util.regex.Matcher;
внеся java.util.regex.Pattern;
внеся java.util.stream.Collectors;
внеся java.util.stream.Stream;
внеся java.util.Коллекция;
внеся java.util.Массивы;
внеся java.util.СвязныйСписок;
внеся java.util.Словарь;
внеся java.util.Список;
внеся org.elliptica.ling.Morph;
внеся org.elliptica.ling.syntax.*;
внеся org.elliptica.ling.Граммема;
внеся org.elliptica.ling.ОтклонениеМорфологии;
внеся org.elliptica.ling.Парадигма;
внеся org.elliptica.ling.ТипГраммемы;
внеся org.elliptica.ling.ЧастьРечи;
внеся эллиптика.ява.морфология.Сложение;
внеся эллиптика.ява.морфология.Сложение.Слитность;
внеся эллиптика.ява.синтаксис.структ.ГруппаСтруктуры;
внеся эллиптика.ява.синтаксис.структ.ФабрикаСтруктуры;

/**
 *
 * @автор Антон Александрович Астафьев {@буквально <anton@astafiev.me>} (Anton Astafiev)
 */
класс ДелегатЛингвистикиВопл воплощает ДелегатЛингвистики {

	@Подмени
	доступный Строка подбериМножЧислоФразы(Строка фраза) {
		верни подбериЗаданнуюФормуФразы(фраза, Массивы.списком(Граммема.множественное));
	}

	@Подмени
	доступный Строка подбериЗаданнуюФормуФразы(Строка фраза, Коллекция<Граммема> целевыеГраммемы) {
		верни операцияНаФразе(фраза, новый ПодборФормы(новый ФормыОтНачала(целевыеГраммемы), ЧастьРечи.существительное));
	}

	@Подмени
	доступный Строка измениНаЗаданнуюФормуСлова(Строка слово, ЧастьРечи частьРечи, Коллекция<Граммема> целевыеГраммемы) {
		верни операцияНаФразе(слово, новый ПодборФормы(новый ФормыОтНачала(целевыеГраммемы), частьРечи));
	}

	@Подмени
	доступный Строка подбериНачальнуюФормуФразы(Строка фраза, Коллекция<Граммема> исходныеГраммемы) {
		верни операцияНаФразе(фраза, новый ПодборНачальнойФормы(новый ФормыКНачалу(исходныеГраммемы), ЧастьРечи.существительное));
	}

	@Подмени
	доступный Коллекция<Граммема> определиФормуФразы(Строка фраза) {
		верни операцияНаФразе(фраза, новый ОпределениеФормы());
	}

	@Подмени
	доступный Строка согласуйФормуСлова(Строка образец, Строка исходное, ЧастьРечи частьРечи) {
		Коллекция<Граммема> исходнаяФорма = определиФормуФразы(образец);
		логическое нужноЛицо = ложь;
		если (частьРечи == ЧастьРечи.глагол) {
			EnumSet<Граммема> исхНабор = EnumSet.copyOf(исходнаяФорма);
			исхНабор.оставьВсе(ГРАММЕМЫ_ЛИЦА);
			нужноЛицо = исхНабор.пусто();
		}
		Коллекция<Граммема> целеваяФорма = Stream.concat(
				нужноЛицо ? Stream.of(Граммема.третье) : Stream.empty(),
				исходнаяФорма.поток().filter(
						гр -> {
							логическое результат = ложь;
							выбери (частьРечи) {
								случай прилагательное:
								случай причастие:
								случай числительное_порядковое:
									результат = результат || гр.тип(ТипГраммемы.Падеж);
								случай глагол:
									результат = результат || гр.тип(ТипГраммемы.Число);
									результат = результат || гр.тип(ТипГраммемы.Лицо);
								случай числительное_количественное:
									результат = результат || гр.тип(ТипГраммемы.Род);
									прерви;
								запасной: верни ложь;
							}

							верни результат;
						}
				)
		)
		.collect(Collectors.toList());

		верни измениНаЗаданнуюФормуСлова(исходное, частьРечи, целеваяФорма);
	}

	личный статичный итоговый EnumSet<Граммема> ГРАММЕМЫ_ЛИЦА;
	статичный {
		Граммема.values();
		Граммема[] границы = ТипГраммемы.Лицо.границы();
		ГРАММЕМЫ_ЛИЦА = EnumSet.range(границы[0], границы[1]);
	}

	@Подмени
	доступный Строка сложноеСлово(Строка начало, Строка конец, Сложение.Характер характер, Слитность слитность) {
		символ[] начало_ = начало.кМассивуСимволов();
		если (Слитность.СОСТАВНОЕ == слитность){
			верни начало + конец;
		}
		если (Сложение.Характер.СИНТАКСИЧЕСКОЕ == характер){
			верни начало + конец;
		}

		цел послНомер = начало_.length -1;
		Строка префикс = начало.подстрока(0, послНомер);
		Строка вторПреф = начало;
		символ опредСимвол = начало_[послНомер];

		если (!('Ё'<= опредСимвол && опредСимвол <='ё')) {
			верни начало + конец;
		}
		выбери ( начало_[послНомер] ) {
			случай 'ь':
			случай 'я':
			случай 'е':
			случай 'й':
				верни префикс + "е" + конец;
			случай 'ю':
			случай 'у':
				верни начало + конец;
			случай 'а':
			случай 'о':
			случай 'ы':
			случай 'и':
				опредСимвол = начало_[послНомер-1];
				вторПреф = префикс;
			запасной:
				выбери ( опредСимвол ){
					случай 'ц':
					случай 'ч':
					случай 'ш':
					случай 'щ':
						верни вторПреф + "е" + конец;
					запасной:
						верни вторПреф + "о" + конец;
				}
		}
	}

	@Подмени
	доступный Строка подмениЧастьФразы(Строка фраза, Строка... замены) {
		Строка[] сегменты = ШАБЛОН_ШАБЛОНА.split(фраза);
		Matcher mr = ШАБЛОН_ШАБЛОНА.matcher(фраза);
		Список<Строка> словаШаблона = новый СвязныйСписок<>();
		Строка входнаяСтрока = "";
		для (Строка сегмент: сегменты){
			входнаяСтрока += сегмент;
			словаШаблона.добавьВсе(Массивы.списком(ШАБЛОН_ПРОБЕЛОВ.split(сегмент)));
			если (mr.find()){
				Строка шаблон = mr.group(1);
				Строка пробел = mr.group(1);
				входнаяСтрока += шаблон + пробел==ничто ? "" : пробел;
				словаШаблона.добавь(шаблон);
			}
		}
		Строка выход = операцияНаСловах(входнаяСтрока, словаШаблона.кМассиву(СТР_МАСС), новый ПодменаШаблонов());
		верни выход;
	}

	личный статичный итоговый Строка[] СТР_МАСС = {};

	статичный сопряжение ЦелевыеФормы {
		Коллекция<Граммема> дляФразы(Коллекция<Граммема> граммемы);
	}

	сопряжение Операция<Тип> {
		Тип дляСлова(Парадигма парадигма, Строка вход) кидает ОтклонениеМорфологии;
		Тип дляФразы(ГруппаСтруктуры группаСтруктуры, Строка вход);
		запасной Строка началоФразы(){
			верни "Проверяется";
		}
		Тип дляСбоя(Строка вход);
		запасной цел рейтинг(Парадигма парадигма){
			верни (парадигма.дайЧастьРечи() == ЧастьРечи.существительное) ? 0 : 1;
		}
	}

	личный <Тип> Тип операцияНаФразе(Строка вход, Операция<Тип> операция) {
		Строка[] слова = ШАБЛОН_ИМЕНИ_МЕТОДА.split(вход);
		верни операцияНаСловах(вход, слова, операция);
	}

	личный <Тип> Тип операцияНаСловах(Строка вход, Строка[] слова, Операция<Тип> операция) {
		ClassLoader oldCL = Thread.currentThread().getContextClassLoader();
		Thread.currentThread().setContextClassLoader(ClassLoader.getSystemClassLoader());

		System.setProperty("jmorph.rml.dir", ПУТЬ_К_СЛОВАРЯМ);

		если (слова.length == 0){
			верни операция.дляСбоя(вход);
		}
		если (слова.length == 1){
			Словарь<Integer,Парадигма> запасныеПарадигмы = новый TreeMap<>();
			для (Парадигма парадигма: Morph.найдиСлово(слова[0]).дайПарадигмы()){
				цел рейтинг = операция.рейтинг(парадигма);
				если (рейтинг == 0){
					верни операция.дляСлова(парадигма, вход);
				} иначе {
					запасныеПарадигмы.клади(рейтинг, парадигма);
				}
			}
			если (!запасныеПарадигмы.пуст()){
				верни операция.дляСлова(запасныеПарадигмы.наборЗаписей().итератор().следующий().getValue(), вход);
			}
		}

		Строка фраза = операция.началоФразы();
		для (Строка слово : слова) {
			фраза += " " + слово.вНижнемРегистре();
		}
		
		СинтаксическоеДерево результат = дайСинтаксис().разборТекста(фраза);

		Предложение предложение = результат.getПредложения().дай(0);
		Вариант вариант = предложение.getСписокФрагментов().дай(0).getВарианты().дай(0);
		Список<Группа> группы = вариант.дайГруппы();

		Integer[] основа = новый Integer[2];
		группы.поток().filter(группа -> группа.дайТип() == Группа.Тип.ОСНОВА).findAny().ifPresent(
			группа -> {
				основа[0] = группа.дайНачало();
				основа[1] = группа.дайКонец();
			}
		);
		
		если (основа[0] == ничто || основа[1] == ничто) {
			верни операция.дляСбоя(вход);
		}

		Список<Группа> итоговыеГруппы = группы.поток()
				.filter(гр -> гр.дайНачало() != основа[1] && гр.дайКонец() != основа[1] )
				.filter(гр -> гр.дайТип() != Группа.Тип.ФРАГМЕНТ)
				.collect(Collectors.toList());
		Список<Омоним> омонимы = вариант.дайЮниты().поток()
				.map(юнит -> юнит.дайОмоним())
				.collect(Collectors.toList());

		ГруппаСтруктуры группаСтруктуры = ФабрикаСтруктуры.создайСтруктуру(итоговыеГруппы, омонимы);
		
		Тип выход = операция.дляФразы(группаСтруктуры, вход);

		Thread.currentThread().setContextClassLoader(oldCL);

		верни выход;
	}

	личный статичный Синтаксис дайСинтаксис(){
		если (ничто == синтаксис)  {
			синтаксис = новый Синтаксис(ПУТЬ_К_СЛОВАРЯМ);
		}
		верни синтаксис;
	}

	личный статичный итоговый Pattern ШАБЛОН_ИМЕНИ_МЕТОДА;
	личный статичный итоговый Pattern ШАБЛОН_ПРОБЕЛОВ;
	личный статичный итоговый Pattern ШАБЛОН_ШАБЛОНА;

	статичный {
		Строка разделитель = "(?=[А-ЯЁ][а-яё]*($|[А-ЯЁ]))";
		ШАБЛОН_ИМЕНИ_МЕТОДА = Pattern.compile(разделитель);

		итоговый Строка шаблонПробелов = "[ \t\n\r]+";
		ШАБЛОН_ПРОБЕЛОВ = Pattern.compile(шаблонПробелов);
		ШАБЛОН_ШАБЛОНА = Pattern.compile("\\$\\{([Ё-Я]?[а-ё]+)\\}" + "(" + шаблонПробелов + ")?");
	}

	личный статичный итоговый Строка ПУТЬ_К_СЛОВАРЯМ = "/mnt/f16/mahairod/Develop/cpp/linguistan/";
	личный статичный Синтаксис синтаксис;


}
