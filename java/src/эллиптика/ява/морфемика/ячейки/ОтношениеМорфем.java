/*
 * Авторское право принадлежит Антону Александровичу Астафьеву <anton@astafiev.me> ѱ 2017.
 * Все права защищены и охраняются законом.
 * Copyright (c) 2017 Anton Astafiev <anton@astafiev.me>. All rights reserved.
 *
 *  Собственная лицензия Астафьева
 * Данный программный код является собственностью Астафьева Антона Александровича
 * и может быть использован только с его личного разрешения
 */

пакет эллиптика.ява.морфемика.ячейки;

внеся java.io.Serializable;
внеся javax.persistence.Basic;
внеся javax.persistence.Column;
внеся javax.persistence.Convert;
внеся javax.persistence.Entity;
внеся javax.persistence.FetchType;
внеся javax.persistence.JoinColumn;
внеся javax.persistence.Lob;
внеся javax.persistence.ManyToOne;
внеся javax.persistence.NamedQueries;
внеся javax.persistence.NamedQuery;
внеся javax.persistence.Table;
внеся эллиптика.ява.вэб.сущности.СущностьАХЯНаКлючеInteger;


/**
 *
 * @автор Антон Александрович Астафьев {@буквально <anton@astafiev.me>} (Anton Astafiev)
 */
@Entity
@Table(name = "morphem_corellation")
@NamedQueries({
	@NamedQuery(name = "ОтношениеМорфем.найдиВсе", query = "SELECT о FROM ОтношениеМорфем о")})
доступный класс ОтношениеМорфем расширяет СущностьАХЯНаКлючеInteger воплощает Serializable {

	личный статичный итоговый ширцел serialVersionUID = 1L;

	@Basic(optional = ложь)
	@Convert(converter = ПреобразовательОтношенияМорфем.класс)
    @Column(name = "отношение")
	личный ТипОтношенияМорфем отношение;

	@Basic(optional = ложь)
	@Convert(converter = ПреобразовательОтношенияМорфем.класс)
    @Column(name = "обратное")
	личный ТипОтношенияМорфем обратное;

	@JoinColumn(name = "внутренняя", referencedColumnName = "разл")
    @ManyToOne(optional = ложь, fetch = FetchType.LAZY)
	личный ЗаписьМорфемы внутренняя;

	@JoinColumn(name = "внешняя", referencedColumnName = "разл")
    @ManyToOne(optional = ложь, fetch = FetchType.LAZY)
	личный ЗаписьМорфемы внешняя;

	доступный ОтношениеМорфем() {
	}

	@Подмени
	доступный Строка строкой() {
		верни "Отношение{" + внутренняя.короткойСтрокой() + "-" + отношение + "=>" + обратное + "-" + внешняя.короткойСтрокой() + '}';
	}

	доступный ТипОтношенияМорфем дайОтношение() {
		верни отношение;
	}

	@Deprecated
	доступный ТипОтношенияМорфем getОтношение() {
		верни дайОтношение();
	}

	@Deprecated
	доступный тщетный setОтношение(ТипОтношенияМорфем отношение) {
		это.задайОтношение(отношение);
	}

	доступный тщетный задайОтношение(ТипОтношенияМорфем отношение) {
		это.отношение = отношение;
	}

	доступный ТипОтношенияМорфем дайОбратное() {
		верни обратное;
	}

	доступный тщетный задайОбратное(ТипОтношенияМорфем обратное) {
		это.обратное = обратное;
	}

	@Deprecated
	доступный ТипОтношенияМорфем getОбратное() {
		верни дайОбратное();
	}

	@Deprecated
	доступный тщетный setОбратное(ТипОтношенияМорфем обратное) {
		задайОбратное(обратное);
	}

	@Deprecated
	доступный ЗаписьМорфемы getВнутренняя() {
		верни дайВнутреннюю();
	}

	доступный ЗаписьМорфемы дайВнутреннюю() {
		верни внутренняя;
	}

	@Deprecated
	доступный тщетный setВнутренняя(ЗаписьМорфемы внутренняя) {
		это.задайВнутреннюю(внутренняя);
	}

	доступный тщетный задайВнутреннюю(ЗаписьМорфемы внутренняя) {
		это.внутренняя = внутренняя;
	}

	@Deprecated
	доступный ЗаписьМорфемы getВнешняя() {
		верни дайВнешнюю();
	}

	доступный ЗаписьМорфемы дайВнешнюю() {
		верни внешняя;
	}

	@Deprecated
	доступный тщетный setВнешняя(ЗаписьМорфемы внешняя) {
		это.задайВнешнюю(внешняя);
	}

	доступный тщетный задайВнешнюю(ЗаписьМорфемы внешняя) {
		это.внешняя = внешняя;
	}

}
