/*
 * Авторское право принадлежит Антону Александровичу Астафьеву <anton@astafiev.me> ѱ 2017.
 * Все права защищены и охраняются законом.
 * Copyright (c) 2017 Anton Astafiev <anton@astafiev.me>. All rights reserved.
 *
 *  Собственная лицензия Астафьева
 * Данный программный код является собственностью Астафьева Антона Александровича
 * и может быть использован только с его личного разрешения
 */

пакет эллиптика.эблок;

внеся org.hamcrest.Matcher;
внеся статичный org.junit.Assert.*;
внеся org.junit.internal.ArrayComparisonFailure;


/**
 *
 * @автор Антон Александрович Астафьев {@буквально <anton@astafiev.me>} (Anton Astafiev)
 */
доступный класс Поручительство {

	доступный статичный тщетный верноИстина(Строка сообщение, логическое условие) {
		assertTrue(сообщение, условие);
	}

	доступный статичный тщетный верноИстина(логическое условие) {
		assertTrue(условие);
	}

	доступный статичный тщетный верноЛожь(Строка сообщение, логическое условие) {
		assertFalse(сообщение, условие);
	}

	доступный статичный тщетный верноЛожь(логическое условие) {
		assertFalse(условие);
	}

	доступный статичный тщетный провал(Строка сообщение) {
		fail(сообщение);
	}

	доступный статичный тщетный провал() {
		fail();
	}

	доступный статичный тщетный верноРавны(Строка сообщение, Object ожидаемое, Object фактическое) {
		assertEquals(сообщение, ожидаемое, фактическое);
	}

	доступный статичный тщетный верноРавны(Object ожидаемое, Object фактическое) {
		assertEquals(ожидаемое, фактическое);
	}

	доступный статичный тщетный верноНеРавны(Строка сообщение, Object неожидаемое, Object фактическое) {
		assertNotEquals(сообщение, неожидаемое, фактическое);
	}

	доступный статичный тщетный верноНеРавны(Object неожидаемое, Object фактическое) {
		assertNotEquals(неожидаемое, фактическое);
	}

	доступный статичный тщетный верноНеРавны(Строка сообщение, ширцел неожидаемое, ширцел фактическое) {
		assertNotEquals(сообщение, неожидаемое, фактическое);
	}

	доступный статичный тщетный верноНеРавны(ширцел неожидаемое, ширцел фактическое) {
		assertNotEquals(неожидаемое, фактическое);
	}

	доступный статичный тщетный верноНеРавны(Строка сообщение, ширдроб неожидаемое, ширдроб фактическое, ширдроб разброс) {
		assertNotEquals(сообщение, неожидаемое, фактическое, разброс);
	}

	доступный статичный тщетный верноНеРавны(ширдроб неожидаемое, ширдроб фактическое, ширдроб разброс) {
		assertNotEquals(неожидаемое, фактическое, разброс);
	}

	доступный статичный тщетный верноНеРавны(дроб неожидаемое, дроб фактическое, дроб разброс) {
		assertNotEquals(неожидаемое, фактическое, разброс);
	}

	доступный статичный тщетный верноМассивыРавны(Строка сообщение, Object[] ожидаемые, Object[] фактические) кидает ArrayComparisonFailure {
		assertArrayEquals(сообщение, ожидаемые, фактические);
	}

	доступный статичный тщетный верноМассивыРавны(Object[] ожидаемые, Object[] фактические) {
		assertArrayEquals(ожидаемые, фактические);
	}

	доступный статичный тщетный верноМассивыРавны(Строка сообщение, логическое[] ожидаемые, логическое[] фактические) кидает ArrayComparisonFailure {
		assertArrayEquals(сообщение, ожидаемые, фактические);
	}

	доступный статичный тщетный верноМассивыРавны(логическое[] ожидаемые, логическое[] фактические) {
		assertArrayEquals(ожидаемые, фактические);
	}

	доступный статичный тщетный верноМассивыРавны(Строка сообщение, байт[] ожидаемые, байт[] фактические) кидает ArrayComparisonFailure {
		assertArrayEquals(сообщение, ожидаемые, фактические);
	}

	доступный статичный тщетный верноМассивыРавны(байт[] ожидаемые, байт[] фактические) {
		assertArrayEquals(ожидаемые, фактические);
	}

	доступный статичный тщетный верноМассивыРавны(Строка сообщение, символ[] ожидаемые, символ[] фактические) кидает ArrayComparisonFailure {
		assertArrayEquals(сообщение, ожидаемые, фактические);
	}

	доступный статичный тщетный верноМассивыРавны(символ[] ожидаемые, символ[] фактические) {
		assertArrayEquals(ожидаемые, фактические);
	}

	доступный статичный тщетный верноМассивыРавны(Строка сообщение, узцел[] ожидаемые, узцел[] фактические) кидает ArrayComparisonFailure {
		assertArrayEquals(сообщение, ожидаемые, фактические);
	}

	доступный статичный тщетный верноМассивыРавны(узцел[] ожидаемые, узцел[] фактические) {
		assertArrayEquals(ожидаемые, фактические);
	}

	доступный статичный тщетный верноМассивыРавны(Строка сообщение, цел[] ожидаемые, цел[] фактические) кидает ArrayComparisonFailure {
		assertArrayEquals(сообщение, ожидаемые, фактические);
	}

	доступный статичный тщетный верноМассивыРавны(цел[] ожидаемые, цел[] фактические) {
		assertArrayEquals(ожидаемые, фактические);
	}

	доступный статичный тщетный верноМассивыРавны(Строка сообщение, ширцел[] ожидаемые, ширцел[] фактические) кидает ArrayComparisonFailure {
		assertArrayEquals(сообщение, ожидаемые, фактические);
	}

	доступный статичный тщетный верноМассивыРавны(ширцел[] ожидаемые, ширцел[] фактические) {
		assertArrayEquals(ожидаемые, фактические);
	}

	доступный статичный тщетный верноМассивыРавны(Строка сообщение, ширдроб[] ожидаемые, ширдроб[] фактические, ширдроб разброс) кидает ArrayComparisonFailure {
		assertArrayEquals(сообщение, ожидаемые, фактические, разброс);
	}

	доступный статичный тщетный верноМассивыРавны(ширдроб[] ожидаемые, ширдроб[] фактические, ширдроб разброс) {
		assertArrayEquals(ожидаемые, фактические, разброс);
	}

	доступный статичный тщетный верноМассивыРавны(Строка сообщение, дроб[] ожидаемые, дроб[] фактические, дроб разброс) кидает ArrayComparisonFailure {
		assertArrayEquals(сообщение, ожидаемые, фактические, разброс);
	}

	доступный статичный тщетный верноМассивыРавны(дроб[] ожидаемые, дроб[] фактические, дроб разброс) {
		assertArrayEquals(ожидаемые, фактические, разброс);
	}

	доступный статичный тщетный верноРавны(Строка сообщение, ширдроб ожидаемое, ширдроб фактическое, ширдроб разброс) {
		assertEquals(сообщение, ожидаемое, фактическое, разброс);
	}

	доступный статичный тщетный верноРавны(Строка сообщение, дроб ожидаемое, дроб фактическое, дроб разброс) {
		assertEquals(сообщение, ожидаемое, фактическое, разброс);
	}

	доступный статичный тщетный верноНеРавны(Строка сообщение, дроб неожидаемое, дроб фактическое, дроб разброс) {
		assertNotEquals(сообщение, неожидаемое, фактическое, разброс);
	}

	доступный статичный тщетный верноРавны(ширцел ожидаемое, ширцел фактическое) {
		assertEquals(ожидаемое, фактическое);
	}

	доступный статичный тщетный верноРавны(Строка сообщение, ширцел ожидаемое, ширцел фактическое) {
		assertEquals(сообщение, ожидаемое, фактическое);
	}

	доступный статичный тщетный верноРавны(ширдроб ожидаемое, ширдроб фактическое) {
		assertEquals(ожидаемое, фактическое);
	}

	доступный статичный тщетный верноРавны(Строка сообщение, ширдроб ожидаемое, ширдроб фактическое) {
		assertEquals(сообщение, ожидаемое, фактическое);
	}

	доступный статичный тщетный верноРавны(ширдроб ожидаемое, ширдроб фактическое, ширдроб разброс) {
		assertEquals(ожидаемое, фактическое, разброс);
	}

	доступный статичный тщетный верноРавны(дроб ожидаемое, дроб фактическое, дроб разброс) {
		assertEquals(ожидаемое, фактическое, разброс);
	}

	доступный статичный тщетный верноНеНичто(Строка сообщение, Object объект) {
		assertNotNull(сообщение, объект);
	}

	доступный статичный тщетный верноНеНичто(Object объект) {
		assertNotNull(объект);
	}

	доступный статичный тщетный верноНичто(Строка сообщение, Object объект) {
		assertNull(сообщение, объект);
	}

	доступный статичный тщетный верноНичто(Object объект) {
		assertNull(объект);
	}

	доступный статичный тщетный верноТоЖе(Строка сообщение, Object ожидаемое, Object фактическое) {
		assertSame(сообщение, ожидаемое, фактическое);
	}

	доступный статичный тщетный верноТоЖе(Object ожидаемое, Object фактическое) {
		assertSame(ожидаемое, фактическое);
	}

	доступный статичный тщетный верноНеТоЖе(Строка сообщение, Object неожидаемое, Object фактическое) {
		assertNotSame(сообщение, неожидаемое, фактическое);
	}

	доступный статичный тщетный верноНеТоЖе(Object неожидаемое, Object фактическое) {
		assertNotSame(неожидаемое, фактическое);
	}

	доступный статичный тщетный верноРавны(Строка сообщение, Object[] ожидаемые, Object[] фактические) {
		assertEquals(сообщение, ожидаемые, фактические);
	}

	доступный статичный тщетный верноРавны(Object[] ожидаемые, Object[] фактические) {
		assertEquals(ожидаемые, фактические);
	}

	доступный статичный <T> тщетный верноЧто(T фактическое, Matcher<? поверх T> подгонщик) {
		assertThat(фактическое, подгонщик);
	}

	доступный статичный <T> тщетный верноЧто(Строка reason, T фактическое, Matcher<? поверх T> подгонщик) {
		assertThat(reason, фактическое, подгонщик);
	}
}
