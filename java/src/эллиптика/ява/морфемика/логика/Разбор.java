/*
 * Авторское право принадлежит Антону Александровичу Астафьеву <anton@astafiev.me> ѱ 2017.
 * Все права защищены и охраняются законом.
 * Copyright (c) 2017 Anton Astafiev <anton@astafiev.me>. All rights reserved.
 *
 *  Собственная лицензия Астафьева
 * Данный программный код является собственностью Астафьева Антона Александровича
 * и может быть использован только с его личного разрешения
 */

пакет эллиптика.ява.морфемика.логика;

внеся java.util.БегунокСписка;
внеся java.util.Итератор;
внеся java.util.Итерируемое;
внеся java.util.Словарь;
внеся java.util.Список;
внеся java.util.ТаблицаСвёрток;
внеся org.elliptica.ling.Граммема;
внеся org.elliptica.ling.ЧастьРечи;
внеся статичный эллиптика.ява.морфемика.логика.Разбор.Состояние.*;
внеся эллиптика.ява.морфемика.ТипМорфемы;
внеся эллиптика.ява.морфемика.ячейки.MorphemDescr;
внеся эллиптика.ява.утилиты.ОбратноеПробегаемое;


/**
 *
 * @автор Антон Александрович Астафьев {@буквально <anton@astafiev.me>} (Anton Astafiev)
 */
доступный класс Разбор {

	доступный статичный логическое отглагольноеЛиИмя(Строка строка, ЧастьРечи частьРечи, ширцел маска_граммем) {
		если (частьРечи != ЧастьРечи.существительное){
			верни ложь;
		}
		Подборщик подборщик = Подборщик.экзмепляр();
		Список<Список<MorphemDescr>> варианты = подборщик.подбери(строка, частьРечи, маска_граммем);
		для (Список<MorphemDescr> структура: варианты){
			ЧастьРечи текЧР = ничто;
			для (MorphemDescr морф:  обратно(структура)){
				если (морф.дайТип() != ТипМорфемы.СУФФИКС){
					прерви;
				}
				если (морф.цельСовместима(ЧастьРечи.существительное)){
					если (морф.дайИсходныйТип() == ЧастьРечи.глагол){
						верни истина;
					}
					возобнови;
				}
				если (морф.цельСовместима(ЧастьРечи.глагол)){
					текЧР = ЧастьРечи.глагол;
				}
				прерви;
			}
			если (текЧР == ЧастьРечи.глагол){
				верни истина;
			}
		}
		верни ложь;
	}

	доступный статичный Строка отглагольноеИмя(Строка строка, ЧастьРечи частьРечи, ширцел маска_граммем) {
		если (частьРечи != ЧастьРечи.инфинитив){
			верни ничто;
		}
		Подборщик подборщик = Подборщик.экзмепляр();
		Список<Список<MorphemDescr>> варианты = подборщик.подбери(строка, частьРечи, маска_граммем);
		Строка результат = ничто;
		для (Список<MorphemDescr> структура: варианты){
			Состояние состояние = ИНФИНИТИВ;
			для (MorphemDescr морф: обратно(структура)){
				Состояние след = состояния.дай(морф.дайРазл());
				выбери (состояние) {
					случай ИНФИНИТИВ:
						если (след == ОСНОВА) {
							состояние = след;
							возобнови;
						} иначе {
							состояние = ОШИБКА;
							прерви;
						}
					случай ОСНОВА:
						если (след == ПРЕДОСНОВА) {
							состояние = след;
							Список<MorphemDescr> суффиксы = подборщик.поиск("ниj").дайСписокРезультатов();
							для (MorphemDescr morphemDescr: суффиксы) {
							}
							если (суффиксы.пусто()) {
								возобнови;
							}
							возобнови;
						} иначе {
							состояние = ОШИБКА;
							прерви;
						}
				}
			}
			если (состояние == ГОТОВО) {
				прерви;
			}
		}
		верни результат;
	}
	
	личный статичный Итерируемое<MorphemDescr> обратно(Список<MorphemDescr> список){
		верни новый ОбратноеПробегаемое<>(список);
	}
	
	личный статичный итоговый Словарь<Integer, Состояние> состояния;
	статичный {
		состояния = новый ТаблицаСвёрток<>(5);
		состояния.клади(1151, ПРЕДОСНОВА);
		состояния.клади(1180, ОСНОВА);
	}

	статичный переч Состояние {
		ИНФИНИТИВ, ОСНОВА, ПРЕДОСНОВА, КОРЕНЬ, ГОТОВО, ОШИБКА
	}
	
}
