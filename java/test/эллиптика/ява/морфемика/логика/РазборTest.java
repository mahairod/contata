/*
 *  Авторское право принадлежит Антону Александровичу Астафьеву <anton@astafiev.me> ѱ 2017.
 *  Все права защищены и охраняются законом.
 *  Copyright (c) 2017 Anton Astafiev <anton@astafiev.me>. All rights reserved.
 * 
 *   Собственная лицензия Астафьева
 *  Данный программный код является собственностью Астафьева Антона Александровича
 *  и может быть использован только с его личного разрешения
 */

пакет эллиптика.ява.морфемика.логика;

внеся java.util.Массивы;
внеся org.elliptica.ling.Граммема;
внеся статичный org.elliptica.ling.Граммема.*;
внеся org.elliptica.ling.ЧастьРечи;
внеся org.junit.BeforeClass;
внеся org.junit.Test;
внеся статичный эллиптика.эблок.Поручительство.*;

/**
 *
 * @автор Антон Астафьев
 */
доступный класс РазборTest {

    доступный РазборTest() {
    }

    @BeforeClass
    доступный статичный тщетный setUpClass() {
    }

	@Test
	доступный тщетный testОтглагольноеЛиИмя() {
		System.out.println("отглагольноеЛиИмя");

		Граммема род = женский;
		ширцел маска_граммем = Граммема.маскаГраммем(Массивы.списком(именительный, единственное, род));

		Строка строка = "кора";
		логическое результат = Разбор.отглагольноеЛиИмя(строка, ЧастьРечи.существительное, маска_граммем);
		верноЛожь(результат);

		строка = "трансляция";
		результат = Разбор.отглагольноеЛиИмя(строка, ЧастьРечи.существительное, маска_граммем);
		верноИстина(результат);
	}

	@Test
	доступный тщетный testОтглагольноеИмя() {
		тестОтглагольноеИмя("создать", "создание");
	}

	@Test
	доступный тщетный testОтглагольноеИмя2() {
		тестОтглагольноеИмя("нести", "несение");
	}

	@Test
	доступный тщетный testОтглагольноеИмя3() {
		тестОтглагольноеИмя("принести", "принесение");
	}

	@Test
	доступный тщетный testОтглагольноеИмя4() {
		тестОтглагольноеИмя("вести", "ведение");
	}

	@Test
	доступный тщетный testОтглагольноеИмя5() {
		тестОтглагольноеИмя("везти", "везение");
	}

	@Test
	доступный тщетный testОтглагольноеИмя6() {
		тестОтглагольноеИмя("пленить", "пленение");
	}

	@Test
	доступный тщетный testОтглагольноеИмя7() {
		тестОтглагольноеИмя("принять", "принятие");
	}

	@Test
	доступный тщетный testОтглагольноеИмя71() {
		тестОтглагольноеИмя("сеять", "сев");
	}

	@Test
	доступный тщетный testОтглагольноеИмя72() {
		тестОтглагольноеИмя("сиять", "сияние");
	}

	@Test
	доступный тщетный testОтглагольноеИмя8() {
		тестОтглагольноеИмя("восприять", "восприятие");
	}

	@Test
	доступный тщетный testОтглагольноеИмя81() {
		тестОтглагольноеИмя("воспринимать", "воспринимание");
	}

	@Test
	доступный тщетный testОтглагольноеИмя9() {
		тестОтглагольноеИмя("полить", "полив");
	}

	@Test
	доступный тщетный testОтглагольноеИмя10() {
		тестОтглагольноеИмя("посадить", "посадка");
	}

	@Test
	доступный тщетный testОтглагольноеИмя11() {
		тестОтглагольноеИмя("измерить", "измерение");
	}

	@Test
	доступный тщетный testОтглагольноеИмя12() {
		тестОтглагольноеИмя("примерить", "примерка");
	}

	@Test
	доступный тщетный testОтглагольноеИмя13() {
		тестОтглагольноеИмя("примирить", "примирение");
	}

	тщетный тестОтглагольноеИмя(Строка проба, Строка ожидаемое) {
		System.out.println("отглагольноеИмя: " + проба);

		Строка строка = проба;
		Строка результат = новый Разбор().отглагольноеИмя(строка, ЧастьРечи.инфинитив);
		верноРавны(ожидаемое, результат);

	}
}