/*
 * Авторское право принадлежит Антону Александровичу Астафьеву <anton@astafiev.me> (Anton Astafiev) ѱ.
 * Все права защищены и охраняются законом.
 * Copyright (c) 2016 Антон Александрович Астафьев <anton@astafiev.me> (Anton Astafiev). All rights reserved.
 *
 *  Собственная лицензия Астафьева
 * Данный программный код является собственностью Астафьева Антона Александровича
 * и может быть использован только с его личного разрешения
 */

пакет эллиптика.ява.язык;

внеся java.util.logging.Level;
внеся java.util.logging.Logger;
внеся java.util.Коллекция;
внеся java.util.Массивы;
внеся org.elliptica.ling.Граммема;
внеся org.elliptica.ling.ТипГраммемы;
внеся org.elliptica.ling.ЧастьРечи;
внеся эллиптика.ява.морфология.Сложение;

/**
 *
 * @author Антон Александрович Астафьев {@literal <anton@astafiev.me>} (Anton Astafiev)
 */
доступный класс Лингвистика {

	доступный статичный Object подбериМножЧислоФразы(символ[] символыФразы) {
		верни дайДелегатаЛингвистики().подбериМножЧислоФразы(символыФразы);
	}

	доступный статичный Object подбериЗаданнуюФормуФразы(символ[] символыФразы, Граммема ... целевыеГраммемы) {
		верни дайДелегатаЛингвистики().подбериЗаданнуюФормуФразы(символыФразы, Массивы.списком(целевыеГраммемы));
	}

	доступный статичный Object измениФормуСлова(символ[] символыФразы, ЧастьРечи частьРечи, Граммема ... целевыеГраммемы) {
		верни дайДелегатаЛингвистики().измениНаЗаданнуюФормуСлова(символыФразы, частьРечи, Массивы.списком(целевыеГраммемы));
	}

	доступный статичный Object согласуйФормуСлова(символ[] образец, символ[] исходное, ЧастьРечи частьРечи) {
		верни дайДелегатаЛингвистики().согласуйФормуСлова(образец, исходное, частьРечи);
	}

	доступный статичный Object сложноеСлово(символ[] начало, символ[] конец, Сложение.Характер характер, Сложение.Слитность слитность) {
		верни дайДелегатаЛингвистики().сложноеСлово(начало, конец, характер, слитность);
	}

	доступный статичный Граммема[] определиФормуФразы(символ[] символыФразы) {
		Коллекция<Граммема> граммемы = дайДелегатаЛингвистики().определиФормуФразы(символыФразы);
		если (граммемы != ничто){
			верни граммемы.кМассиву(МАССИВ_ГРАММЕМ);
		} иначе {
			верни ничто;
		}
	}

	доступный статичный Граммема[] определиРодФразы(символ[] символыФразы) {
		верни определиГраммемыТипаФразы(символыФразы, ТипГраммемы.Род);
	}

	доступный статичный Граммема[] определиГраммемыТипаФразы(символ[] символыФразы, ТипГраммемы типГраммемы) {
		Граммема[] граммемы = определиФормуФразы(символыФразы);
		если (граммемы == ничто){
			верни новый Граммема[0];
		}
		цел genCount = 0;
		для (цел i=0; i<граммемы.length; i++){
			если (граммемы[i].тип(ТипГраммемы.Род)){
				граммемы[genCount] =  граммемы[i];
				genCount++;
			}
		}
		верни Массивы.copyOf(граммемы, genCount);
	}

	личный статичный итоговый Граммема[] МАССИВ_ГРАММЕМ = новый Граммема[0];

	личный статичный ДелегатЛингвистики дайДелегатаЛингвистики() {
		если (делегатЛингвистики == ничто ){
			попробуй {
				Class кл = ClassLoader.getSystemClassLoader().loadClass("эллиптика.ява.язык.ДелегатЛингвистикиВопл");
				верни (ДелегатЛингвистики) кл.newInstance();
			} ловя (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
				ЛОГ.log(Level.SEVERE, "Не удалось получить ДелегатЛингвистики", ex);
			}
		}
		верни делегатЛингвистики;
	}

	личный статичный ДелегатЛингвистики делегатЛингвистики;

	статичный итоговый Logger ЛОГ = Logger.getLogger(Лингвистика.класс.дайИмя());
}
