/*
 * Авторское право принадлежит Антону Александровичу Астафьеву <anton@astafiev.me> (Anton Astafiev) ѱ.
 * Все права защищены и охраняются законом.
 * Copyright (c) 2016 Антон Александрович Астафьев <anton@astafiev.me> (Anton Astafiev). All rights reserved.
 *
 *  Собственная лицензия Астафьева
 * Данный программный код является собственностью Астафьева Антона Александровича
 * и может быть использован только с его личного разрешения
 */

пакет эллиптика.ява.язык;

внеся java.util.regex.Pattern;
внеся java.util.stream.Collectors;
внеся java.util.Массивы;
внеся java.util.МножествоСвёрток;
внеся java.util.Список;
внеся org.elliptica.ling.Morph;
внеся org.elliptica.ling.syntax.Вариант;
внеся org.elliptica.ling.syntax.Группа;
внеся org.elliptica.ling.syntax.Омоним;
внеся org.elliptica.ling.syntax.Предложение;
внеся org.elliptica.ling.syntax.Синтаксис;
внеся org.elliptica.ling.syntax.СинтаксическоеДерево;
внеся org.elliptica.ling.syntax.Слово;
внеся org.elliptica.ling.Граммема;
внеся org.elliptica.ling.Парадигма;
внеся org.elliptica.ling.ФормаСлова;
внеся org.elliptica.ling.ЧастьРечи;
внеся эллиптика.ява.синтаксис.структ.ГруппаСтруктуры;
внеся эллиптика.ява.синтаксис.структ.ФабрикаСтруктуры;

/**
 *
 * @author Антон Александрович Астафьев {@literal <anton@astafiev.me>} (Anton Astafiev)
 */
класс ДелегатЛингвистикиВопл воплощает ДелегатЛингвистики {
	доступный Строка подбериМножЧислоФразы(символ[] символыФразы) {
		ClassLoader oldCL = Thread.currentThread().getContextClassLoader();
		Thread.currentThread().setContextClassLoader(ClassLoader.getSystemClassLoader());

		System.setProperty("jmorph.rml.dir", путьКСловарям);

		Строка вход = новый Строка(символыФразы);
		Строка[] слова = шаблон.split(вход);

		если (слова.length == 0){
			верни ничто;
		}
		если (слова.length == 1){
			Строка начФорма = "";
			для (Парадигма парадигма: Morph.найдиСлово(слова[0]).дайПарадигмы()){
				начФорма = парадигма.дайБазовуюФорму();
				если (парадигма.дайЧастьРечи() == ЧастьРечи.существительное){
					прерви;
				}
			}
			ФормаСлова фс = Morph.найдиФорму(начФорма, новый МножествоСвёрток<Граммема>( Массивы.списком(Граммема.множественное, Граммема.именительный) ));
			верни фс.дайСлово().toLowerCase();
		}

//		Список<ЧастьРечи> 

		Строка фраза = "Проверяется";
		для (Строка слово : слова) {
			фраза += " " + слово.toLowerCase();
		}

		СинтаксическоеДерево результат = дайСинтаксис().разборТекста(фраза);

		Предложение предложение = результат.getПредложения().дай(0);
		Слово слово = предложение.дайСписокСлов().дай(1);
		Омоним омоним = слово.дайОмонимы().дай(0);
		Вариант вариант = омоним.дайЮнит().родитель();
		Список<Группа> группы = вариант.дайГруппы();

		Integer[] основа = новый Integer[2];
		группы.поток().filter(группа -> группа.дайТип() == Группа.Тип.ОСНОВА).findAny().ifPresent(
			группа -> {
				основа[0] = группа.дайНачало();
				основа[1] = группа.дайКонец();
			}
		);

		Список<Группа> итоговыеГруппы = группы.поток()
				.filter(гр -> гр.дайНачало() != основа[1] && гр.дайКонец() != основа[1] )
				.collect(Collectors.toList());
		Список<Омоним> омонимы = вариант.дайЮниты().поток()
				.map(юнит -> юнит.дайОмоним())
				.collect(Collectors.toList());

		ГруппаСтруктуры группаСтруктуры = ФабрикаСтруктуры.создайСтруктуру(итоговыеГруппы, омонимы);

		Список<Граммема> граммемы = группаСтруктуры.дайГраммемы();
		граммемы.удали(Граммема.единственное);
		граммемы.добавь(Граммема.множественное);
		группаСтруктуры.смениФорму(граммемы);

		символ[] символы = группаСтруктуры.дайФразу().toCharArray();
		цел й = 0;
		для (цел и = 0; и < символы.length; и++, й++) {
			если (символы[и] == ' '){
				если (и + 1 < символы.length){
					и++;
					символы[й] = Character.toUpperCase(символы[и]);
				}
			} иначе {
					символы[й] = символы[и];
			}
		}

		Thread.currentThread().setContextClassLoader(oldCL);

		верни новый Строка(символы, 0, й);
	}

	личный статичный Синтаксис дайСинтаксис(){
		если (ничто == синтаксис)  {
			синтаксис = новый Синтаксис(путьКСловарям);
		}
		верни синтаксис;
	}

	личный статичный итоговый Строка разделитель = "(?=[А-ЯЁ][а-яё]*($|[А-ЯЁ]))";
	личный статичный итоговый Pattern шаблон = Pattern.compile(разделитель);

	личный статичный итоговый Строка путьКСловарям = "/mnt/f16/mahairod/Develop/cpp/linguistan/";
	личный статичный Синтаксис синтаксис;


}
